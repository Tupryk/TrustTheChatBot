ManipulationModelling

The following text describes the usage of the ManipulationModelling framework, which allows for the straightforward creation of robot manipulation problems.


Random pick and placing:

```
gripper = "l_gripper"
box = "box"
table = "table"

def pick_place(obj: str, grasp_direction: str, place_direction: str, place_position: list[float], info: str="", vis: bool=False) -> bool:
	M = manip.ManipulationModelling(C, info, helpers=[gripper])
	M.setup_pick_and_place_waypoints(gripper, obj, homing_scale=1e-1)
	M.grasp_box(1., gripper, obj, "l_palm", grasp_direction)
	M.place_box(2., obj, table, "l_palm", place_direction)
	M.target_relative_xy_position(2., obj, table, place_position)
	M.solve()
	if not M.feasible:
		return False, [], []

	M1 = M.sub_motion(0)
	M1.keep_distance([.3,.7], "l_palm", obj, margin=.05)
	M1.retract([.0, .2], gripper)
	M1.approach([.8, 1.], gripper)
	path1 = M1.solve()
	if not M1.feasible:
		return False, [], []

	M2 = M.sub_motion(1)
	M2.keep_distance([], table, "panda_collCameraWrist")
	M2.keep_distance([.2, .8], table, obj, .04)
	M2.keep_distance([], "l_palm", obj)
	path2 = M2.solve()
	if not M2.feasible:
		return False, [], []

	if vis:
		M1.play(C, 1.)
		C.attach(gripper, obj)
		M2.play(C, 1.)
		C.attach(table, obj)

	return True, path1, path2

attempt_count = 100

for l in range(attempt_count):

	target_position = [
		midpoint[0] + np.random.uniform(-.15, .15),
		midpoint[1] + np.random.uniform(-.15, .15),
		0.]
	
	grasp_direction = np.random.choice(["x", "z"])  # "y" not possible: box too large
	place_direction = np.random.choice(["x", "y", "z", "xNeg", "yNeg", "zNeg"])

	success, path1, path2 = pick_place(box, grasp_direction, place_direction, target_position, str(l), vis=True)
```

Random pushing:
```
gripper = "l_gripper"
box = "box"
table = "table"

def push(obj: str, target_pos: list[float], info: str="", vis: bool=False) -> tuple:
	M = manip.ManipulationModelling(C, f"push_motion_{info}", ['l_gripper'])
	M.setup_pick_and_place_waypoints(gripper, obj, 1e-1, accumulated_collisions=False)
	M.straight_push([1.,2.], obj, gripper, table)
	M.target_xy_position(2., obj, target_pos)
	M.solve()
	if not M.feasible:
		return False, []

	M1 = M.sub_motion(0, accumulated_collisions=False)
	M1.retractPush([.0, .15], gripper, .03)
	M1.approachPush([.85, 1.], gripper, .03)
	M1.keep_distance([.15,.85], obj, "l_finger1", .02)
	M1.keep_distance([.15,.85], obj, "l_finger2", .02)
	M1.keep_distance([.15,.85], obj, 'l_palm', .02)
	M1.keep_distance([], table, "l_finger1", .0)
	M1.keep_distance([], table, "l_finger2", .0)
	path1 = M1.solve()
	if not M1.feasible:
		return False, []

	M2 = M.sub_motion(1, accumulated_collisions=False)
	M2.komo.addObjective([], ry.FS.positionRel, [gripper, '_push_start'], ry.OT.eq, 1e1*np.array([[1,0,0],[0,0,1]]))
	path2 = M2.solve()
	if not M2.feasible:
		return False, []

	if vis:
		M1.play(C, 1.)
		C.attach(gripper, obj)
		M2.play(C, 1.)
		C.attach(table, obj)

	path = np.append(path1, path2)
	return True, path

attempt_count = 30

for l in range(attempt_count):

	target_position = [
		midpoint[0] + np.random.uniform(-.15, .15),
		midpoint[1] + np.random.uniform(-.15, .15),
		0.]
	
	success, path = push(box, target_position, str(l), vis=True)
```

Random pulling:
```
gripper = "l_gripper"
box = "box"
table = "table"

def pull(obj: str, target_pos: list[float], info: str="", vis: bool=False) -> tuple:
	M = manip.ManipulationModelling(C, info, ['l_gripper'])
	M.setup_pick_and_place_waypoints(gripper, obj, 1e-1)
	M.pull([1., 2.], obj, gripper, table)
	M.target_xy_position(2., obj, target_pos)
	M.solve()
	if not M.feasible:
		return False, []

	M1 = M.sub_motion(0, accumulated_collisions=False)
	M1.retractPush([.0, .15], gripper, .03)
	M1.approachPush([.85, 1.], gripper, .03)
	path1 = M1.solve()
	if not M1.feasible:
		return False, []

	M2 = M.sub_motion(1, accumulated_collisions=False)
	path2 = M2.solve()
	if not M2.feasible:
		return False, []

	if vis:
		M1.play(C, 1.)
		C.attach(gripper, obj)
		M2.play(C, 1.)
		C.attach(table, obj)
	
	path = np.append(path1, path2, 0)
	return True, path

attempt_count = 30

for l in range(attempt_count):

	target_position = [
		midpoint[0] + np.random.uniform(-.15, .15),
		midpoint[1] + np.random.uniform(-.15, .15),
		0.]
	
	success, path = pull(box, target_position, str(l), vis=True)
```