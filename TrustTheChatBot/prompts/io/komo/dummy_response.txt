```json
{
  "thought": "To pour a beer, the robot needs to pick up the beer bottle, position it over the glass, and tilt the bottle to pour the contents without spilling. This will require a multi-phase optimization. The first phase will involve grasping the beer bottle. The second phase will involve moving the bottle over the glass. The third phase will involve tilting the bottle to pour the beer into the glass. The fourth phase will involve bringing the beer bottle back to an upright position.",
  "n_phases": "4",
  "code": "
# Phase 1: Grasp the beer bottle
komo.addObjective([1], ry.FS.positionDiff, ['l_gripper', 'beer'], ry.OT.eq, [1e1])
komo.addObjective([], ry.FS.scalarProductXX, ['l_gripper', 'beer'], ry.OT.eq, [1e1], [0])  # align gripper with bottle
komo.addObjective([], ry.FS.scalarProductXZ, ['l_gripper', 'beer'], ry.OT.eq, [1e1], [0])
komo.addObjective([1], ry.FS.distance, ['l_palm', 'beer'], ry.OT.ineq, [1e1])

# Add mode switch to attach the bottle to the gripper
komo.addModeSwitch([1, 2], ry.SY.stable, ['l_gripper', 'beer'])

# Phase 2: Move the bottle over the glass
komo.addObjective([2, 3], ry.FS.positionDiff, ['beer', 'glass'], ry.OT.eq, [1e1], [0, 0, 0.1])  # position bottle above glass

# Phase 3: Tilt the bottle to pour
komo.addObjective([3], ry.FS.quaternionDiff, ['beer', 'glass'], ry.OT.eq, [1e1], [1, 0.707, 0, 0.707])  # tilt bottle

# Phase 4: Return the bottle to upright position
komo.addObjective([4], ry.FS.quaternion, ['beer'], ry.OT.eq, [1e1], [1, 0, 0, 0])  # upright bottle

# Break the kinematic link between robot and beer
# komo.addModeSwitch([4], ry.SY.break, ['l_gripper', 'beer'])
"
}
```
